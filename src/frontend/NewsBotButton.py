from dotenv import load_dotenv

from telegram import Update, InputFile
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)

document_filter = (
        filters.Document.FileExtension("txt") |
        filters.Document.FileExtension("csv"))

import requests
import logging
import os
import io

import nest_asyncio

nest_asyncio.apply()

load_dotenv()
API_ENDPOINT = os.getenv("API_URL") + "/predict"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
MAIN_MENU, WAITING_TEXT, WAITING_FILE = range(3)

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
BTN_TEXT_LENGTH = 'üìè –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–∏'
BTN_FILE_LENGTH = 'üìÅ –§–∞–π–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏'
BTN_CANCEL = '‚ùå –û—Ç–º–µ–Ω–∞'


# –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def delete_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'messages_to_delete' in context.user_data:
        for msg_id in context.user_data['messages_to_delete']:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=msg_id
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        context.user_data['messages_to_delete'] = []


# –°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
async def track_message(context: ContextTypes.DEFAULT_TYPE, message_id: int):
    if 'messages_to_delete' not in context.user_data:
        context.user_data['messages_to_delete'] = []
    context.user_data['messages_to_delete'].append(message_id)


# –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def track_user_message(context: ContextTypes.DEFAULT_TYPE, message_id: int):
    if 'user_messages_to_delete' not in context.user_data:
        context.user_data['user_messages_to_delete'] = []
    context.user_data['user_messages_to_delete'].append(message_id)


# –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫
def create_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        [[KeyboardButton(BTN_TEXT_LENGTH), KeyboardButton(BTN_FILE_LENGTH)]],
        resize_keyboard=True
    )


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
def create_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    return ReplyKeyboardMarkup(
        [[KeyboardButton(BTN_CANCEL)]],
        resize_keyboard=True
    )


# –°—Ç–∞—Ä—Ç—É–µ–º
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_previous_messages(update, context)
    msg = await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard()
    )
    await track_message(context, msg.message_id)
    return MAIN_MENU


# –í—ã–∑–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def predict_category(inpt):
    response = requests.post(API_ENDPOINT, json={"text": inpt})
    return response.json()


def send_mess_to_classification(inp):
    inp = inp.replace('\r\n', '')
    categories = predict_category(inp)['labels']
    categories = [cat['label'] + f" ({str(round(cat['score'], 2) * 100)}%)" for cat in categories]
    res = f"{inp}:\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + ', '.join(categories)
    return res


def parse_file_content(content):
    content = content.split(';')
    content = [i for i in content if len(i) >= 5]
    res_data = ""
    for itm in content:
        line = send_mess_to_classification(itm)

        res_data += line.replace('\r\n\t', '') + '\n\n'

    return res_data


# –ó–∞–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞)
# –†–µ–∞–ª–∏–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    await delete_previous_messages(update, context)
    await track_user_message(context, update.message.message_id)

    text = update.message.text
    if text == BTN_TEXT_LENGTH:

        msg = await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å:",
            reply_markup=create_cancel_keyboard()
        )
        await track_message(context, msg.message_id)

        return WAITING_TEXT

    elif text == BTN_FILE_LENGTH:

        msg = await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏:",
            reply_markup=create_cancel_keyboard()
        )
        await track_message(context, msg.message_id)

        return WAITING_FILE
    return MAIN_MENU


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BTN_CANCEL:
        return await cancel(update, context)

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    text = update.message.text

    await delete_previous_messages(update, context)

    await update.message.reply_text(
        f"{send_mess_to_classification(text)}",
        reply_markup=create_main_keyboard()
    )

    return MAIN_MENU


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
async def handle_file_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BTN_CANCEL:
        return await cancel(update, context)

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    temp_file_path = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        document = update.message.document
        file = await document.get_file()

        # –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –±–∞–π—Ç—ã
        file_bytes = await file.download_as_bytearray()

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å –Ω—É–∂–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        content = file_bytes.decode('utf-8')

        # –ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞                  
        new_content = parse_file_content(content)

        await delete_previous_messages(update, context)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏
        modified_file = io.BytesIO(new_content.encode('utf-8'))
        modified_file.name = f"modified_{document.file_name}"

        await update.message.reply_document(
            document=InputFile(modified_file),
            reply_markup=create_main_keyboard()
        )

    except Exception as e:
        logger.error(f"File error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")

    finally:
        if temp_file_path and os.path.exists(temp_file_path):
            os.remove(temp_file_path)

    return MAIN_MENU


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    try:
        await context.bot.delete_message(chat_id, update.message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await delete_previous_messages(update, context)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'user_messages_to_delete' in context.user_data:
        for msg_id in context.user_data['user_messages_to_delete']:
            try:
                await context.bot.delete_message(chat_id, msg_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        context.user_data['user_messages_to_delete'] = []

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    await delete_previous_messages(update, context)
    msg = await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=create_main_keyboard()
    )

    await track_message(context, msg.message_id)
    return MAIN_MENU  # –í–∞–∂–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


def main():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(os.getenv("BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)
            ],
            WAITING_TEXT: [
                MessageHandler(filters.Regex(f'^{BTN_CANCEL}$'), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input)
            ],
            WAITING_FILE: [
                MessageHandler(filters.Regex(f'^{BTN_CANCEL}$'), cancel),
                MessageHandler(document_filter, handle_file_input)
            ]
        },
        fallbacks=[CommandHandler('start', start)]
    )

    app.add_handler(conv_handler)
    app.run_polling()


if __name__ == '__main__':
    main()
